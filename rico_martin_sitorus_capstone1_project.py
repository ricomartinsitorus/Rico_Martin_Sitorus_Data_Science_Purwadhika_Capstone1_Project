# -*- coding: utf-8 -*-
"""Rico_Martin_Sitorus_Capstone1_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NarKos2_IEbTy76xlOHy8Fpqild02q1

Code to store the ID inside of the list

The ID Number in 'ID'list will be used to call the data of the person and the books they borrowed

# PARAMETERS/DATABASES
"""

# code to store the predefined ID Number
ID = [15,25, 30]

# Code to store the identities for each ID Number
person = {
    15 : {'Name':'Syamsul', 'e-mail':'syamsul@gmail.com'} ,
    25 : {'Name':'Ari', 'e-mail':'ari@gmail.com'},
    30 : {'Name':'Bayu', 'e-mail':'bayu@gmail.com'}
}

# Code to store the books that each ID borrowed

books = {
    15 : {'Books': ['bukuA', 'bukuB'],
          'Borrowing_date':['January','February'],
          'Return_date' : ['N/A','April']},
    25 : {'Books' : ['bukuc','bukuD'],
          'Borrowing_date':['May','June'],
          'Return_date' : ['July', 'August']}
}

#books[25]

"""# General Functions

1. CODE TO CHECK ID NUMBER AVAILABILITY ACROSS DATABASES
"""

# Code to check the availability of ID number in ID, Books, and Person database
def ID_check(i):
  return (i in ID) and (i in books) and (i in person)

"""2. CODE TO ASK USER WHETHER USER WANT TO CONTINUE THE STEP OR NOT"""

# THE GENERAL FUNCTION TO ASK USERS WHETHER WANT TO CONTINUE OR NO
# CAN BE USED FOR REPETITIVE FUNCTION

def repeater():
  while True:
    continuity = str(input('"Do you wish to continue ? (Y/N) : "')).upper()

    if continuity == "Y":
      return True
    elif continuity =="N":
      return False
    else :
      print('\n')
      print("\033[1m Wrong input, please try again! \033[0m")
      print('\n')
      continue

"""3. CODE TO CHECK THE INPUT WHETER IT'S A VALID INTEGER OR NOT

CAN BE USED TO CHECK THE INPUT FOR ID NUMBER
"""

# THE GENERAL FUNCTION TO CHECK THE INPUT IS POSITIVE INTEGER OR NOT

def integer_check(user_input):
  user_input = str(user_input)

  if user_input.isdigit():
    return True
  else:
    return False

#integer_check(200)

"""4. Code to check the status of the book, return or not returned"""

def return_status(idnumber, book_index):
  if (books[idnumber]['Borrowing_date'][book_index] != 'N/A') and (books[idnumber]['Return_date'][book_index] != 'N/A') :
    return True
  else :
    return False

# test the status code

#return_status(15, 0)

"""5. General code to convert month from integer (0 - 12) become alphabetic"""

# CODE TO CONVERT MONTH (INTEGER TO ALPAHBETIC)

def calendar(month_numeric):

  month_numeric = int(month_numeric)

  if month_numeric == 0 :
    return 'N/A'
  elif month_numeric == 1 :
    return 'January'
  elif month_numeric == 2 :
    return 'February'
  elif month_numeric == 3 :
    return 'March'
  elif month_numeric == 4 :
    return 'April'
  elif month_numeric == 5 :
    return 'May'
  elif month_numeric == 6 :
    return 'June'
  elif month_numeric == 7 :
    return 'July'
  elif month_numeric == 8 :
    return 'August'
  elif month_numeric == 9 :
    return 'September'
  elif month_numeric == 10 :
    return 'October'
  elif month_numeric == 11 :
    return 'November'
  elif month_numeric == 12 :
    return 'December'

"""# READ FUNCTION

## **Function to read all data**

---
"""

# test for empty databases
#ID = []
#person = {}
#books = {}

def read_all_data():

# ==================== before continue, check if there are data in the datasets or not ===============================
  if (len(ID) == 0) and (len(person) == 0) and (len(books) == 0):
    print("\033[1m No data found \033[0m")
    print('\n')
  else:

# ========== IF THERE ARE DATA, PROCEED TO READ ===============================================
    print("\n")
    print("The all available recorded data are : ")
    print("ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")

    for i in ID :

      if i not in books :# to check and skip the users that currenty don't borrow book
        continue
      else :

        status = None

        #print(person[i]['Name'], "|", person[i]['e-mail'])
        for a in range(len(books[i]['Books'])):

          # check the status of the book (returned or not returned)
          if return_status(i, a) == True :
            status = 'Returned'
          else :
            status = 'Not_Returned'

          print(i,"|", person[i]['Name'], "|", person[i]['e-mail'],"|", books[i]['Books'][a], "|", books[i]['Borrowing_date'][a],"|", books[i]['Return_date'][a], "|", status)

    print("\n")

#calling the function read_all_data

#read_all_data()

"""## **Function to read data based on ID**

---


"""

# Function to call data based on ID
   # x identifying as person's ID

def call_id():
  print("Reading data for specific ID Number")
  while True :
    x = input('Please insert your ID : ')

# ******************************************* FIRST CHECK WHETHER THE INPUT IS POSITIVE INTEGER OR NOT ********************************************************************#
    if integer_check(x) == True :

      x = int(x)  # RETURNING THE INPUT BECOME INTEGER SO IT CAN BE PROCESSED

# *************************************** IF THE INPUT PROVEN TO BE POSITIVE INTEGER, THE PROCESS CONTINUED ****************************************************************#
# ==============================================================DATA AVAILIBILITY CHECK ===================================================================================#
    # check the ID is available or not
    # if data available --> read, if not --> return

      if ID_check(x) == True :
        print("Data record for users with ID Number {} are :".format(x))




#=============================================== CALL THE DATA OF PERSON AND BOOKS BORROWED =============================================================================== #
        for y in range(len(books[x]['Books'])):

          # ````````````````````````````` check the status of the book (returned or not returned) `````````````````````````````````````````````
          status = None
          if return_status(x, y) == True:
            status = 'Returned'
          else :
            status = 'Not_Returned'

          print(x,"|", person[x]['Name'], "|", person[x]['e-mail'],"|", books[x]['Books'][y], "|", books[x]['Borrowing_date'][y],"|", books[x]['Return_date'][y], "|", status)

        print('\n') # give some spaces for the output


      else :
        print('Data is not found, please try again !')
        print('\n')

 # ===========================================CHECK WHETHER USER WANT TO REPEAT PROCESS OR NOT ============================================================================ #

      if repeater() == True:
        continue
      else :
        print("\033[1mEnd of the process\033[0m")
        print('\n')
        break

    else:  # IF THE INPUT IS NOT POSITIVE INTEGER, PROCESS ABORTED AND THE SYSTEM ASKED THE USER TO RE-ENTER THE INPUT
      print('\n')
      print("\033[1mPlease input positive integer number only\033[0m")
      print('\n')
      continue

#call_id()

"""## **Read Function based on status (returned or not returned books)**"""

def read_by_status():


  print('\n')
  print("Read data based on the book status (returned or not returned)")
  print('\n')

  while True:

    print('\n')
    status = str(input ("Please specify the status you want to see, type R for 'Returned' and B for 'Not Returned' (R/B) : ")).upper()

    if status == "R":
      print('\n')
      print("Menu to read the returned books")
      print('\n')
      print("ID_Number", "|", "Name", "|", "E-Mail", "|", "Book_Name", "|", "Borrowing_date", "|", "Return_date")
      print('\n')

      # ------------------------------------------ code block to take the data for returned book --------------------------------------------
      for i in ID:

        if i not in books : # To skip the user ID that has no record in borrowing books (in books dictionary)
          continue
        else:


          num_book = 0 # number of book returned for each user ID
          for a in range(len(books[i]['Books'])):

            if return_status(i, a) == True:  # check the status of the book, if returned than true
              num_book += 1
              print(i, "|", person[i]['Name'], "|", person[i]['e-mail'], "|", books[i]['Books'][a], "|", books[i]['Borrowing_date'][a], "|", books[i]['Return_date'][a])
            else :
              continue
          print("User with ID_Number {}, {} has returned {} book(s)".format(i, person[i]['Name'],num_book))
        print('\n')


    elif status == "B" :
      print('\n')
      print("Menu to read the not returned books")
      print('\n')
      print("ID_Number", "|", "Name", "|", "E-Mail", "|", "Book_Name", "|", "Borrowing_date")
      print('\n')

      # ------------------------------ Block Code to read the not returned books -----------------------------------------

      for i in ID:

        if i not in books : # To skip the user ID that has no record in borrowing books (in books dictionary)
          continue
        else:

          num_book = 0  # to calculate the number of not returned book for each user ID

          for a in range(len(books[i]['Books'])):

            if return_status(i,a) == False:
              # to check the status of not returned book , should be false
              num_book += 1
              print(i, "|", person[i]['Name'], "|", person[i]['e-mail'], "|", books[i]['Books'][a], "|", books[i]['Borrowing_date'][a], "|", books[i]['Return_date'][a])
            else :
              continue


        if num_book != abs(0) :  # ONLY PRINT THE USER THAT STILL HAS BOOK(S) TO RETURN

          print("User with ID_Number {}, {} has {} book(s) to return".format(i, person[i]['Name'],num_book))
          print('\n')
        else :
          continue


    else :
      print('\n')
      print('\033[1mWrong input ! Please re-enter the correct value : \033[0m')
      print('\n')
      continue

    # ============================== CODE TO CHECK WHETHER USER WANT TO CONTINUE OR NOT ============================================

    if repeater() == True:
      continue
    else :
      print('\n')
      print("\033[1mEnd of the process\033[0m")
      print('\n')
      break

#read_by_status()

"""## **Read Functions integration**"""

def menu_1():

  while True:
    print('\033[1mMenu 1 for Data Reading\033[0m')
    print('Please choose the menu to proceed')
    print('1. Read the all available data')
    print('2. Read data based on ID Number')
    print('3. Read data based on status (returned or not returned) ')
    print('4. Back to Main Menu')

    choice_menu1 = input('Specify your input :')
    print('\n') # give some line

    if choice_menu1 == "1":
      read_all_data()
    elif choice_menu1 == "2":
      call_id()
    elif choice_menu1 =="3":
      read_by_status()
    elif choice_menu1 =="4":
      print('\033[1mBack to main menu ...\033[0m')
      return
    else :
      print("\033[1m Wrong input, please try again! \033[0m")
      print('\n')

#menu_1()

"""# **CREATE FUNCTION**

## CREATE NEW USER ID DATA

### FILLER CODE (FILLING THE DATA)

*Function to fill in the data (filler)*
"""

# GENERAL CODE TO FILL IN THE DATA FOR NEW USE ID (FILLER)

def create_id_data(new_num):

  new_id = {}


  if integer_check(new_num) == True:
    name = str(input('Please input the name :'))
    email = str(input('Please input the e-mail :'))

    new_id[new_num]={'Name': name, 'e-mail':email}


    return new_id

   # print(new_id)

  else :
    print("Please only input the positive integer as ID_Number ")

"""### CALLER CODE

This code used to call the filler and asking for the approval from the user
"""

# CALLER FUNCTION
# TO CALL THE FILLER AND ASK THE USER'S APPROVAL
# FUNCTION TO CREATE THE ID NUMBER, FOR BOTH ID LIST AND PERSON LIST

def create_new_id():
  print('\n')
  print("\033[1m You selected the menu to create new ID_Number \033[0m")
  print('\n')
  print("You can input the new ID number and system will do the checking")
  print("If there is no existing ID number, you can proceed the new data")


  while True :

    print('\n')
    num = input('Please input the ID number :')
    print('\n')

    # `````````````````````````` first of all, do the data checking, if the ID number is Positive Integer ```````````````````````````````````````````````

    if integer_check(num) == True:

      #if the input is confirmed as positive integer --> proceed to check whether the data already avail or not

      num = int(num) # to make sure input 'num' is integer

      if (num in ID) and (num in person):
        print("\033[1m The ID_Number already available, please input other number \033[0m")
        continue
      else:
        # if the new id number is not avail yet in previous data, proceed to create new user

        new_id_data = create_id_data(num) # this to create the data like name, email, and saved in 'new_id_data' variable

        #_________________________________ SHOW USER THE PREVIEW OF THE NEW DATA ______________________________________________________

        print('\n')
        print('You just entered the new ID data, with detail below :')
        print('ID_Number : ',num)
        print('Name :', new_id_data[num]['Name'] )
        print('E-mail :', new_id_data[num]['e-mail'])
        print('\n')

      # ==================================== AFTER CREATING THE NEW DATA, WE WILL ASK THE USER WHETHE TO SAVE IT OR CANCEL THE PROCESS ===============

        while True :

          print("What would you like to do with the data ? ")
          print("S : Press 'S' to Save the data")
          print("X : Press 'X' to Cancle the process")
          print("R : Press 'R' to Re-input data (incase the data are wrong)")
          print('\n')

          decide = str(input('Specify your input : ')).upper()

          if decide == "S":
            ID.append(num)
            person.update(new_id_data)
            print('\n')
            print('\033[1m New data saved succesfully \033[0m')
            break
          elif decide =="R":
            print('\n')
            print("\033[1m You choose to re-enter the data \033[0m")
            break
          elif decide == "X":
            print('\n')
            print('\033[1m Process canceled \033[0m')
            return
          else :
            print("\033[1m Please enter the valid answer (S/R/X) \033[0m")
            continue

      if repeater() == True:
        continue
      else :
        print("Process ended")
        break

    else:
      print("\033[1m Please only input the positive integer as ID_Number! \033[0m")
      continue

# TESTING THE CALLER FUNCTION

#create_new_id()

"""## CREATE USER'S BORROWING RECORD

### FILLER FOR BORROWING DATA

This code to fill in the borrowing data, for specified user ID
"""

# FUNCTION OF BORROWING DATA - FILLER

# TO FILL IN THE BORROWING DATA FOR SPECIFIED
def create_borrow_data(borrower_id):

  while True:

    book_name = str(input('Please enter the book title " '))

    # ============ IN THIS PROGRAM, USER INPUT 0 - 12 FOR MONTH, AND WILL BE CONVERTED INTO NAME OF MONTH =======

    while True:  # INPUT THE BORROWING MONTH AND CONVERT TO ALPHABETIC
      borrowing_date = input('Please enter the borrowing month : ')

      if integer_check(borrowing_date) == True : #~~~~~~` check whether the input is positive integer or not ~~~~~~~~~~~~~~
        if (int(borrowing_date) != 0) and (int(borrowing_date) < 13) :
          borrowing_date = calendar(borrowing_date)
          borrowing_date = str(borrowing_date)
          break
        else :
          print('\n')

          print("\033[1m Please enter only positive integer (1 - 12) \033[0m")
          continue
      else:
        print('\n')
        print("\033[1m Please enter only positive integer (1 - 12) \033[0m")
        continue

    while True : # INPUT THE RETURNING MONTH AND CONVERT TO ALPHABETIC

      print('\n')
      print("Please enter month (0 - 12), with O if the book has not returned")
      returning_date = input('Please enter the returning month : ')

      if integer_check(returning_date) == True: #~~~ check whether the return month integer or not ~~~
        if (int(returning_date) < 13) :
          returning_date = calendar(returning_date)
          returning_date = str(returning_date)
          break
        else :
          print('\n')
          print("\033[1m Please enter only positive integer (0 - 12) \033[0m")
          continue
      else:
        print('\n')
        print("\033[1m Please enter only positive integer (0 - 12) \033[0m")
        continue


    # ====================================================== SHOW PREVIEW OF THE DATA ====================================================

    print('\n')
    print("You will add new data as : ")
    print('ID_Number : ', borrower_id)
    print('Name : ', person[borrower_id]['Name'])
    print('E-Mail : ', person[borrower_id]['e-mail'])
    print('Book_name : ', book_name)
    print('Borrowing_month :', borrowing_date)
    print('Returning_month : ', returning_date)
    print('\n')


    # ================================================ show option to save or not ========================================================
    while True:
      print('\n')
      print("S : Press 'S' to Save the data")
      print("X : Press 'X' to Cancle the process")
      print("R : Press 'R' to Re-enter the data")

      user_decide = str(input('Specify your input (S/X/R)')).upper()

      if user_decide == "R":
        print('\n')
        print("\033[1m You choose to re-enter the data \033[0m")
        break
      elif user_decide == "X":
        print('\n')
        print('\033[1m Process canceled \033[0m')
        return
      elif user_decide == "S":

        # ================================================== PROCEED TO SAVE THE NEW RECORD ===========================
        print('\n')
        print("\033[1m Data saved successfully \033[0m")

        # _____________________ check first if there is data of recording ______________________
        temporary_dict = {}  # to create temporary dictionary used to update 'books' dictionary

        if borrower_id not in books :
        # ````````````````````````````````` if no record for this, create new dictionary `````````````````````````
          temporary_dict = {borrower_id: {'Books': [book_name], 'Borrowing_date': [borrowing_date], 'Return_date':[returning_date]}}
          books.update(temporary_dict)


        else:
        # `````````````````````````` if there is a record, we can add by adding the values for each key ~~~~~~~~```
          books[borrower_id]['Books'].append(book_name)
          books[borrower_id]['Borrowing_date'].append(borrowing_date)
          books[borrower_id]['Return_date'].append(returning_date)

        return #---- exit the menu loop after data addition complete


      else :
        print('\n')
        print("\033[1m Please submit the valid value (S/X/R) ! \033[0m")
        continue

"""### BORROWING DATA - CALLER

The caller function used as interface for user when filling the data and asking for user's approval (save data or not)
"""

# BORROWING DATA - CALLER

# THIS CALLER FUNCTION USED AS INTERFACE TO ADD DATA OF BORROWED BOOKS AND ASK FOR USER APPROVAL (SAVE DATA OR NOT)
def create_borrow_records():
  print('\n')
  print("You choose to create the borrowing records")

  while True:
    print('\n')
    borrow_id = input('Please specify the ID_Number : ')

    # ----------------------------------------------------- check whether the input integer or not ------------------------------------------------

    if integer_check(borrow_id) == True: # ----------------------------- if the input is integer, proceed further ---------

      borrow_id = int(borrow_id)

      ### ~~~~~~~ check whether the ID is available or not in our database ~~~~~~~~~~
      if (borrow_id not in ID) and (borrow_id not in person):
        # ~~~~~~~~~ if ID not found, skip the step ~~~~~~~~~~
        print('\n')
        print("\033[1m No ID Number found, please try to enter another ID_Number \033[0m")
        continue

      else : # ~~~~~~ if ID found, proceed to create borrowing records ~~~~

        # __________________________ SHOW PREVIOUS RECORDED BORROWS_________________________-
        print('\n')
        print("You choose the ID_Number : {}, Name : {}, E-Mail : {}".format(borrow_id, person[borrow_id]['Name'], person[borrow_id]['e-mail']))
        print('\n')

        print('Last borrowing records for this ID :')
        print('\n')

        if borrow_id not in books :
          print("None, this user doesn't has borrowing record")    # shown when id never borrow book yet
        else :
          print("ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")

          status = None

          for j in range(len(books[borrow_id]['Books'])):

            if return_status(borrow_id, j) == True:
              status = 'Returned'
            else :
              status = 'Not Returned'

            print(borrow_id,"|", person[borrow_id]['Name'], "|", person[borrow_id]['e-mail'],"|", books[borrow_id]['Books'][j], "|", books[borrow_id]['Borrowing_date'][j],"|", books[borrow_id]['Return_date'][j], "|", status)

          # ____________________________ SET THE OPTION TO ADD THE NEW DATA _____________________________________________
        while True:

          print('\n')
          print("A : Press 'A' to continue adding the record")
          print("X : Press 'X' to cancel and return to previous menu")

          choice_borrow = str(input('Please specify your input (A/X) : ')).upper()

          if choice_borrow == "X":
            print('\n')
            print('\033[1m You chose to go back to previous menu \033[1m')
            return
          elif choice_borrow == "A":
            print('\n')
            create_borrow_data(borrow_id)

            break

            ### ================================== REPEATER TO CHECK, USER WANT TO ADD ANOTHER DATA OR NOT =================

          else :
            print('\n')
            print("\033[1m Input is not valid, please enter A/X only \033[0m")
            continue


      if repeater() == True:
        continue
      else:
        break



    else:
      print("\n")
      print("\033[1m Wrong input, please only enter positive integer for ID_Number \033[0m")
      continue

"""### Test Borrowing Data function"""

#create_borrow_records()

"""## **CREATE FUNCTION INTEGRATION**

This code act as integrator to integrate the two functions (add user ID only and add borrowing data)
"""

def menu_2():

  print('\n')
  print('\033[1m Menu 2 : Program to create ID_Number and books borrowing records \033[0m')


  while True:

    print('\n')
    print("Please find the data for ID_Number that available in the database")
    print('\n')
    print("ID_Number", "|", "Name", "|", "E-Mail")
    print('\n')

    # =================== show the list of available users in the database as reference when adding the data ==============================
    for i in ID :
      print(i, "|", person[i]['Name'], "|", person[i]['e-mail'])

    #========================================= LIST OF ACTIONS THAT WE CAN DO =============================================================
    print('\n')
    print('Please select the process you would like to do')
    print('1. Create new ID_Number data (ID Only)')
    print('2. Create borrowing data for specific ID_Number')
    print('3. Back to Main Menu')
    print('\n')

    choice_menu2 = input('Specify your input (1-3) : ')

    if choice_menu2 == "1":
      create_new_id()
    elif choice_menu2 == "2":
      print('\n')
      create_borrow_records()
    elif choice_menu2 == "3":
      print("\033[1m Back to main menu \033[0m")
      return
    else:
      print('\n')
      print("\033[1m Wrong input, please try again! \033[0m")

"""### *INTEGRATOR - TEST*"""

#menu_2()

"""# DELETE FUNCTION

## HARD RESET (DELETE ALL DATA)
"""

# HARD RESET FUNCTION
# This function used to clear all data (ID, name, email, and borrowing records)
def hard_reset():
  print('\n')
  print(' You chose the option to clear all the data ')
  print('\033[1m !!! Will clear ID, Name, e-mail, and all borrowing records !!! \033[0m')
  print("\033[1m !!! Once the process done, you can't recover the deleted data !!! \033[0m")
  print('\n')

  while True:
    print('\033[1m Are you sure to do the process ? \033[0m')
    print('\033[1m Press Y to proceed, or N to cancel \033[0m')

    hard_decision = str(input('State your input (Y/N) : ')).upper()

    if hard_decision == "N":
      print('\n')
      print('\033[1m HARD RESET CANCELED \033[0m')
      print('\n')
      break
    elif hard_decision == "Y":
      print('\n')
      print('CLEARING ALL THE DATA')

      ID.clear()
      person.clear()
      books.clear()

      print('\n')
      print(' -- HARD RESET DONE -- ')
      break

    else:
      print('\n')
      print('Invalid input, please only enter Y/N')
      print('\n')
      continue

# function test
#hard_reset()

"""## DELETE ID_NUMBER

This code used to delete certain ID_Number and the data under it, like name, email and books borrowing records
"""

# DELETE SPECIFIC ID

# This function used to delete SPECIFIC ID_NUMBER along with it's corresponding data (including name, e-mail, and borrowing records)

def delete_id():
  print('\n')
  print('You chose the function to delete specific ID_Number')
  print('This function will delete the ID along with the name, e-mail and borrowing records')


  while True:
    print('\n')
    print('Below are the list of ID_Number in the database : ')

    # ~~~~~~~~~~~~~~~~~~ call all the ID in database as reference for users ~~~~~~~~~~~~~~~~~~~~
    print('\n')
    print("ID_Number", "|", "Name", "|", "E-Mail")

    for i in ID :
      print(i, "|", person[i]['Name'], "|", person[i]['e-mail'])




    while True:

      # =================================== SHOW USER THE INPUT COMMAND =============================
      print('\n')
      print('Please input the user ID_Number to proceed')
      print('Or type any non integer value to cancel')

      print('\n')

      delete_id_input = input('Specify your input : ')

      # ------------- check whether the input is integer (proceed) or non integer (cancel) ---------------------

      if integer_check(delete_id_input) == False:  # if input is not integer, cancel
        print('\n')
        print('Canceled')
        return

      else:   # if input is integer, proceed further

        delete_id_input = int(delete_id_input)

        # _____________ CHECK IS THE ID_NUMBER AVAILABLE IN OUR DATABASE OR NOT __________
        if (delete_id_input not in ID) and (delete_id_input not in person):
          print('\n')
          print('ID_Number not found, please try again!')
          print('\n')
          break

        else:

          while True:
            print('\n')
            print('Are you sure want to delete this ID ?')
            print('ID : {}, Name : {}, E-Mail : {}'.format(delete_id_input, person[delete_id_input]['Name'], person[delete_id_input]['e-mail']))

            commands = str(input('Specify your input, Yes(Y), or No(N) : ')).upper()
            if commands == "Y":
              break
            elif commands =="N":
              print('\n')
              print('\033[1m Process canceled \033[0m')
              return
            else:
              print('\n')
              print('Wrong input, enter only Y/N')
              continue

          # if command is Yes, than proceed to delete the data

          # ----------- delete data in ID list------------
          if (delete_id_input in ID):
            ID.remove(delete_id_input)

          # ----------- delete data in person dictionary-------
          if (delete_id_input in person):
            del person[delete_id_input]

          # ------------ delete data in books dictionary --------
          if(delete_id_input in books):
            del books[delete_id_input]

        print('\n')
        print('DELETING DATA : DONE !')
        break




    # ================== ASK WANT TO CONTINUE OR NOT ===========
    if repeater() == True:
      continue
    else:
      break

# code test :
#delete_id()

"""## DELETE DATA FOR SPECIFIC ID AND SPECIFIC RECORD"""

# DELETE DATA FOR SPECIFIC ID AND SPECIFIC RECORD

def delete_id_borrow():

  print('\n')
  print('You chose the menu to delete data for specific ID and specific record')

  # -------------------------------- ASK INPUT FROM THE USER -------------------------------------

  while True:
    print('\n')
    print('Please insert the ID_Number to proceed, or type non integer value to exit')
    print('\n')

    control = input('Specify your input (ID_Number or Anykeys : )')

    if integer_check(control) == False:
      print('\n')
      print('\033[1mCanceled\033[0m')
      return

    else:
      control = int(control)

      # ~~~~~~ Check whether the IDNumber(control) available in Database or not ~~~~~~~~~~~~~~

      if (control not in ID) and (control not in person): # if ID not found, ask to re-enter the ID
        print('\n')
        print('\033[1mID_Number not found, please re-enter the correct ID\033[0m')
        continue

      else:
        # ------------ check the ID has borrowing record(s) or not ------------------------
        if(control not in books):
          print('\n')
          print('\033[1mThis ID_Number has no borrowing record, please enter another ID_Number\033[0m')
          continue

        else:
          # --- if ID is available in database and it has borrowing record, proceed the delete ---------
          # Show the borrowing records
          print('\n')
          print('\033[1mSelected ID {}, Name : {}, e-mail : {}\033[0m'.format(control, person[control]['Name'], person[control]['e-mail']))
          print('\n')
          print('\033[1mBorrowing records : \033[0m')
          print('\n')

          # the code will show the list and the line number, to help user when choosing the intended record to be deleted

          print("Line_Number", "|", "ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")

          length_books = len(books[control]['Books']) # to count the number of books borrowed

          status = None # checking the status of borrowed book

          for s in range(length_books):

            if return_status(control, s) == True :
              status = 'Returned'
            else:
              status = 'Not_returned'

            print(s+1, "|", control,"|", person[control]['Name'], "|", person[control]['e-mail'],"|", books[control]['Books'][s], "|", books[control]['Borrowing_date'][s],"|", books[control]['Return_date'][s], "|", status)

          # NOW WE ASK THE USER, WHICH LINE THEY WANT TO DELETE
          # THE INPUT SHOULD NOT MORE THAN THE AVAILABLE BOOK RECORDS
          # PRESS 0 TO CANCEL
          # RE-ENTER INPUT IF NOT INTEGER (0 - etc)

          while True :

            print('\n')
            print('Please enter the intended line to delete')
            print('or press 0 to cancel')
            index = input('Specify your input (integer only) : ')

            # _________ check whether index is integer or not _____________
            if integer_check(index) == False:
              print('\n')
              print('\033[1mWrong input, please enter integer only!\033[0m')
              continue
            else:
              # if integer, than check, is it 0 (cancel) or not
              index = int(index)
              if index == 0 :
                print('\n')
                print('CANCELED')
                return

              elif index > length_books :
                print('\n')
                print('Line_Number not found, should not 0 or exceeding the available lines')
                continue

              else:

                # PROCEED TO DELETE SPECIFIC LINE FROM RECORDS

                print('\n')
                print('You would like to delete the record below : ')
                print('\n')
                print("Line_Number", "|", "ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")
                status2 = None

                if return_status(control, index-1) == True:  # note, variable index from user started from 1, so we have to substract with 1 to read data in list
                  status2 = 'Returned'
                else:
                  status2 = 'Not_returned'

                print(index, "|", control,"|", person[control]['Name'], "|", person[control]['e-mail'],"|", books[control]['Books'][index-1], "|", books[control]['Borrowing_date'][index-1],"|", books[control]['Return_date'][index-1], "|", status2)

                # ================================= COMMAND TO PROCEED, CANCEL OR RE-INPUT DATA ===================================================================================================

                while True:
                  print('\n')
                  print('What would like you do with this line ? ')
                  print("D : press 'D' if you want to proceed to delete line")
                  print("X : press 'X' if you want to cancel the process")
                  print("R : press 'R' if you want to re-submit/change the line_number")

                  input_command = str(input('Specify your input : ')).upper()

                  if input_command == "X":
                    print('\n')
                    print('Process canceled')
                    return
                  elif input_command == "R":
                    print('\n')
                    print('Changging the line data')
                    break
                  elif input_command == "D":

                    # __________ proceed to delete the data _______________

                    del books[control]['Books'][index-1]
                    del books[control]['Borrowing_date'][index-1]
                    del books[control]['Return_date'][index-1]

                    print('\n')
                    print('\033[1mData has been deleted successfully\033[0m')

                    return
                  else :
                    print('\n')
                    print('\033[1mWrong input, please enter only (D/R/X) !\033[0m')
                    continue


    if repeater() == True:
      continue
    else:
        print('\n')
        print('\033[1mFUNCTION ENDED\033[0m')
        break

# code test :
#delete_id_borrow()

"""## DELETE FUNCTION INTEGRATOR"""

def menu_4():

  while True:
    print('\n')
    print('\033[1m Menu 4 Program to delete ID_Number and borrowing records \033[0m')
    print('\n')
    print("Please find the data for ID_Number that available in the database")
    print('\n')
    print("ID_Number", "|", "Name", "|", "E-Mail")
    print('\n')

    # =================== show the list of available users in the database as reference when adding the data ==============================
    for i in ID :
      print(i, "|", person[i]['Name'], "|", person[i]['e-mail'])

    #========================================= LIST OF ACTIONS THAT WE CAN DO =============================================================
    print('\n')
    print('Please select the process you would like to do')
    print('1. Delete ID_Number data and all its records')
    print('2. Delete only specific data/record for specific ID_Number')
    print('3. Delete all data (all ID and all records)')
    print('4. Back to Main Menu')
    print('\n')

    choice_menu4 = input('Specify your input (1-4) : ')

    if choice_menu4 == "1":
      delete_id()
    elif choice_menu4 == "2":
      delete_id_borrow()
    elif choice_menu4 == "3":
      hard_reset()
    elif choice_menu4 == "4":
      print("\033[1m Back to main menu \033[0m")
      return
    else:
      print('\n')
      print("\033[1m Wrong input, please try again! \033[0m")

# code tester :
#menu_4()

"""# **UPDATE FUNCTION**

## UPDATE ID DATA

This function used to update name and email for specific user ID
"""

def update_id():
  print('\n')
  print('You chose the menu to edit data for ID_Number : ')

  # --------------- check if the input is integer or not  --------------------------

  while True:
    print('\n')
    input_update = input('Enter the integer ID_Number to continue, or enter any key to exit : ')

    if integer_check(input_update) == False :
      print('\n')
      print('\033[1mProcess CANCELED\033[0m')

    else :

      input_update = int(input_update)
      # if the input is integer, check whether the input is in database or not

      if (input_update not in ID) and (input_update not in person):
        print('\n')
        print('\033[1mID_Number is not found, please try again\033[0m')
        continue
      else :
        #  ------- if the input is integer and avail in dataset, proceed to update -------
        print('\n')
        print('You would like to change the data for this users : ')
        print("ID", "|", "Name", "|", "e-mail")
        print(input_update, "|", person[input_update]['Name'], "|", person[input_update]['e-mail'])

        # ----------- ASK WHICH COLUMN WOULD LIKE TO EDIT ---------------

        while True:
          print('\n')
          print('Specify the column name you would like to change')
          print('You can update any column, \033[1m except the ID Number\033[0m')
          print('\033[1mCase sensitive, make sure you enter the correct input\033[0m')
          column = str(input('Column name : '))

          if column not in person[input_update] :
            print('\033[1mThe column "{}" is not available, try again\033[0m'.format(column))
            continue
          else :
            print('\n')
            print('You would like to update the column {}'.format(column))

            # ============== ASK THE INPUT FOR NEW DATA ==================================

            while True :

              new_data = str(input('Enter new data : '))
              print('\n')
              print('You will change the data for Column " {}"'.format(column))
              print('Old data : {} | {}'.format(input_update, person[input_update][column]))
              print('New data : {} | {}'.format(input_update, new_data))

              # ========================== ASK THE USER WHETHER TO SAVE OR NOT ===========================

              control_redo = None  ## this control to decide re-do or not

              while True:

                print('\n')
                options = str(input("Press 'U' to Update, 'X' to cancel all the process, 'R' to re-submit data : " )).upper()

                if options == 'X':
                  print('\n')
                  print('\033[1mAll process canceled\033[0m')
                  control_redo = False
                  break
                elif options == "R":
                  print('\n')
                  print('\033[1mRe-submitting the data\033[0m')
                  control_redo = True
                  break
                elif options == "U":
                  # ----------------- updating the data --------------------
                  person[input_update][column] = new_data
                  print('\n')
                  print('\033[1mData Updated successfully\033[0m')
                  control_redo = False
                  break

                else:
                  print('\n')
                  print('\033[1mPlease input valid value (U/X/R) !\033[0m')
                  continue

                # CHECKING TO RE-ENTER DATA OR NOT BASED ON CONTROL_REDO VARIABLE

              if control_redo == True:
                continue
              else:
                break
            break

    print('\n')
    if repeater() == True:
      continue
    else:
      break

# code test
#update_id()

"""## UPDATE SPECIFIC LINE DATA

This code used to update specific line of borrowing records data for specific user ID
"""

def update_borrow():
  print('\n')
  print('You chose the menu to edit data for ID_Number : ')

  # --------------- check if the input is integer or not  --------------------------

  while True:
    print('\n')
    input_update = input('Enter the integer ID_Number to continue, or enter any key to exit : ')

    # yes no questions - bottom

    if integer_check(input_update) == False :
      print('\n')
      print('\033[1mProcess CANCELED\033[0m')

    else :

      input_update = int(input_update)
      # if the input is integer, check whether the input is in database or not

      if (input_update not in ID) and (input_update not in person):
        print('\n')
        print('\033[1mID_Number is not found, please try again\033[0m')
        continue
      else :
        #  ---------------------------- if the input is integer and avail in dataset, proceed to check the borrowing recordS ----------------------

        if input_update not in books :
          print('\n')
          print('\033[1mThis user id has no borrowing record(s)\033[0m')
          print('\033[1mPlease enter other ID number\033[0m')
          continue
        else :
          # NO BREAK NEEDED FOR THIS BLOCK
          print('\n')
          print('The borrowing records for user id {}, Name : {}, e-mail : {} is/are :'.format(input_update, person[input_update]['Name'], person[input_update]['e-mail']))
          print('\n')
          print("Line_Number", "|", "ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")

          ####### =========================================================================================== SHOWING THE BORROWING RECORDS =========================================================================================================
          length_books = len(books[input_update]['Books']) # to count the number of books borrowed
          status = None # checking the status of borrowed book

          for s in range(length_books):

            if return_status(input_update, s) == True :
              status = 'Returned'
            else:
                status = 'Not_returned'

            print(s+1, "|", input_update,"|", person[input_update]['Name'], "|", person[input_update]['e-mail'],"|", books[input_update]['Books'][s], "|", books[input_update]['Borrowing_date'][s],"|", books[input_update]['Return_date'][s], "|", status)

          # =====================================================================================================================================================================================================================================================

          # NOW WE ASK THE USER, WHICH LINE THEY WANT TO UPDATE
          # THE INPUT SHOULD NOT MORE THAN THE AVAILABLE BOOK RECORDS
          # PRESS 0 TO CANCEL
          # RE-ENTER INPUT IF NOT INTEGER (0 - etc)

          while True : # ------------ Loop to check  the input to decide which line want to delete

            print('\n')
            print('Please enter the intended line to update')
            print('or press 0 to cancel')
            index = input('Specify your input (integer only) : ')

            # _________ check whether index is integer or not _____________
            if integer_check(index) == False:
              print('\n')
              print('\033[1mWrong input, please enter integer only!\033[0m')
              continue
            else:
              # if integer, than check, is it 0 (cancel) or not
              index = int(index)
              if index == 0 :
                print('\n')
                print('CANCELED')
                break

              elif index > length_books :
                print('\n')
                print('\033[1mLine_Number not found, should not 0 or exceeding the available lines\033[0m')
                continue

              else: ## kasih break jika proses update line tertentunya sudah selesai

                # PROCEED TO SHOW THE SELECTED LINE AND UPDATE THAT SPECIFIC LINE FROM RECORDS
                print('\n')
                print('You would like to change the data for this details : ')
                print('\n')
                print("Line_Number", "|", "ID_Number", "|", "Name", "|", "E-Mail", "|", "Books", "|", "Borrowing_date", "|", "Return_date", "|", "Status")

                status2 = None
                if return_status(input_update, index-1) == True:  # note, variable index from user started from 1, so we have to substract with 1 to read data in list
                  status2 = 'Returned'
                else:
                  status2 = 'Not_returned'

                print(index, "|", input_update,"|", person[input_update]['Name'], "|", person[input_update]['e-mail'],"|", books[input_update]['Books'][index-1], "|", books[input_update]['Borrowing_date'][index-1],"|", books[input_update]['Return_date'][index-1], "|", status2)


                # _____________________________________________________ASK WHICH COLUMN WOULD LIKE TO EDIT _____________________________________________________________________________

                while True:
                  print('\n')
                  print('Specify the column name you would like to change')
                  print("\033[1mYou can update any column 'Books', 'Borrowing_date' and 'Return_date\033[0m")
                  print('\033[1mCase sensitive, make sure you enter the correct input\033[0m')
                  column = str(input('Column name : '))

                  # ************************ Check first, the column is correct or not **************************

                  if column not in books[input_update] :
                    print('\033[1mThe column "{}" is not available or not permitted for edit, try again\033[0m'.format(column))
                    continue
                  else :
                    print('\n')
                    print('You would like to update the column {}'.format(column))

                    # *********************************************** if the column is available, ask to input the new data ********************************************

                    while True :

                      if column == 'Borrowing_date' :
                        print('\033[1mSince you choose Borrowing_date, please make sure to enter only integer value\033[0m')
                        print('\033[1mEnter 1 - 12 (representing January - December)\033[0m')


                      if column == 'Return_date':
                        print('\033[1mSince you choose Return_date, please make sure to enter only integer value\033[0m')
                        print('\033[1mEnter 0 - 12 (representing January - December), and 0 if book has not returned\033[0m')

                      ######################################################################################################################################################
                      #------------------------------------------------------FUNCTION TO CHANGE NEW_DATA BECOME MONTH -----------------------------------------------------
                      # THIS FUNCTION USED WHEN COLUMN IS "Borrowing_date or Return_date"


                      if column == 'Borrowing_date':  # ************************ if updating borrowing_date **********************8

                        while True:  # INPUT THE BORROWING MONTH AND CONVERT TO ALPHABETIC
                          print('\n')
                          new_data = input('Enter new data : ')

                          if integer_check(new_data) == True : #~~~~~~` check whether the input is positive integer or not ~~~~~~~~~~~~~~
                            if (int(new_data) != 0) and (int(new_data) < 13) :
                              new_data = calendar(new_data)
                              new_data = str(new_data)
                              break
                            else :
                              print('\n')
                              print("\033[1m Please enter only positive integer (1 - 12) for 'Borrowing_date column\033[0m")
                              continue
                          else:
                            print('\n')
                            print("\033[1m Please enter only positive integer (1 - 12) for 'Borrowing_date column\033[0m")
                            continue

                      elif column == 'Return_date' : # *************************** if updating return_date ************************
                        while True : # INPUT THE RETURNING MONTH AND CONVERT TO ALPHABETIC
                          print('\n')
                          new_data = input('Enter new data : ')

                          if integer_check(new_data) == True: #~~~ check whether the return month integer or not ~~~
                            if (int(new_data) < 13) :
                              new_data = calendar(new_data)
                              new_data = str(new_data)
                              break
                            else :
                              print('\n')
                              print("\033[1m Please enter only positive integer (0 - 12), with 0 when the book has not returned \033[0m")
                            continue
                          else:
                              print('\n')
                              print("\033[1m Please enter only positive integer (0 - 12), with 0 when the book has not returned \033[0m")
                              continue

                      else :
                        print('\n')
                        new_data = input('Enter new data : ')
                        new_data = str(new_data)
                        # if column is not borrowing or return date, new data remains as string


                      #######################################################################################################################################################

                      # ____________________________________Preview of data changes _________________________________________________
                      print('\n')
                      print('You will change the data for Column " {}"'.format(column))
                      print('Old data : {} | {}'.format(input_update, books[input_update][column][index-1]))
                      print('New data : {} | {}'.format(input_update, new_data))

                      # ____________________________________________________________________________________________________________


                      # ========================== ASK THE USER WHETHER TO SAVE OR NOT ===========================

                      control_redo = None  ## this control to decide re-do or not

                      while True:

                        print('\n')
                        options = str(input("Press 'U' to Update, 'X' to cancel all the process, 'R' to re-submit data : " )).upper()

                        if options == 'X':
                          print('\n')
                          print('\033[1mAll process canceled\033[0m')
                          control_redo = False
                          break
                        elif options == "R":
                          print('\n')
                          print('\033[1mRe-submitting the data\033[0m')
                          control_redo = True
                          break
                        elif options == "U":
                          # ----------------- updating the data --------------------
                          books[input_update][column][index-1] = new_data
                          print('\n')
                          print('\033[1mData Updated successfully\033[0m')
                          control_redo = False
                          break

                        else:
                          print('\n')
                          print('\033[1mPlease input valid value (U/X/R) !\033[0m')
                          continue

                        # CHECKING TO RE-ENTER DATA OR NOT BASED ON CONTROL_REDO VARIABLE

                      if control_redo == True:
                          continue
                      else:
                        break
                    break
                break


    if repeater() == True:
      continue
    else:
      break

# code test
#update_borrow()

"""## UPDATE MENU INTEGRATOR"""

def menu_3():

  print('\n')
  print('\033[1m Menu 3, program to update ID data and books borrowing records \033[0m')


  while True:

    print('\n')
    print("Please find the data for ID_Number that available in the database")
    print('\n')
    print("ID_Number", "|", "Name", "|", "E-Mail")
    print('\n')

    # =================== show the list of available users in the database as reference when adding the data ==============================
    for i in ID :
      print(i, "|", person[i]['Name'], "|", person[i]['e-mail'])

    #========================================= LIST OF ACTIONS THAT WE CAN DO =============================================================
    print('\n')
    print('Please select the process you would like to do')
    print('1. Update data for user ID, including Name and e-mail')
    print('2. Update borrowing records for specific ID and specific book')
    print('3. Back to Main Menu')
    print('\n')

    choice_menu3 = input('Specify your input (1-3) : ')

    if choice_menu3 == "1":
      update_id()
    elif choice_menu3 == "2":
      print('\n')
      update_borrow()
    elif choice_menu3 == "3":
      print("\033[1m Back to main menu \033[0m")
      return
    else:
      print('\n')
      print("\033[1m Wrong input, please try again! \033[0m")

#menu_3()

"""# MAIN MENU CODE"""

def main_menu():
  while True:
    print("This is the main menu for the Rico's Library Program")
    print("\n")
    print("Please specify your selections based on these menus")
    print("1. Read Data")
    print("2. Create New Data")
    print("3. Edit Existing Data")
    print("4. Delete Data")
    print("5. Exit Program")
    print("\n")

    choice_main = input('Specify your input (1-5) : ')

    if choice_main =="1":
      print('\n')
      menu_1()
      print('\n')
    elif choice_main =="2":
      print('\n')
      menu_2()
      print('\n')
    elif choice_main =="3":
      print('\n')
      menu_3()
      print('\n')
    elif choice_main =="4":
      print('\n')
      menu_4()
      print('\n')
    elif choice_main =="5":
      print("\n")
      print("\033[1m Exit from the program \033[0m")
      break
    else :
      print('\n')
      print("\033[1m Wrong input, please try again !\033[0m")
      print('\n')
      continue

#main_menu()

"""# USER INTERFACE"""

# MAIN INTERFACE

print("Hello, welcome to Rico's Library Program With Python")
print('\n')
print("In this program you will be able to : ")
print(" * See the log of borrowed and returned book for users")
print(" * Create, edit, and delete data")
print('\n')
print("For pedagogical purpose, the program use Monthly bases for borrow and return periods")

while True:
  print('\n')
  choice = input('Would you like to continue (Y/N) : ').upper()

  if choice =="Y":
    main_menu()
    break
  elif choice =="N":
    print("\n")
    print("\033[1m Closing the program \033[0m")
    break
  else :
    print("\033[1m Wrong input, please try again ! \033[0m")
    continue

"""# DATABASE CHECK"""

#ID

#person

#books